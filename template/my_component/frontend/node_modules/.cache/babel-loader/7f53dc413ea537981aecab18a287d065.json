{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hanna\\\\Desktop\\\\component-template\\\\template\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numClicks: 0\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"]; // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"sources":["C:/Users/hanna/Desktop/component-template/template/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","state","numClicks","render","name","props","args","onClicked","disabled","setState","prevState","setComponentValue"],"mappings":";AAAA,SACEA,SADF,EAEEC,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;;AAMA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BH,sBAA1B,CAAwD;AAAA;AAAA;AAAA,SAC/CI,KAD+C,GACvC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADuC;;AAAA,SAG/CC,MAH+C,GAGtC,MAAiB;AAC/B;AACA;AACA,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb,CAH+B,CAK/B;AACA;AACA;AACA;;AACA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACUF,IADV,yBAEE;AAAQ,QAAA,OAAO,EAAE,KAAKG,SAAtB;AAAiC,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAQD,KApBqD;;AAAA,SAuB9CD,SAvB8C,GAuBlC,MAAY;AAC9B;AACA;AACA,WAAKE,QAAL,CACEC,SAAS,KAAK;AAAER,QAAAA,SAAS,EAAEQ,SAAS,CAACR,SAAV,GAAsB;AAAnC,OAAL,CADX,EAEE,MAAMN,SAAS,CAACe,iBAAV,CAA4B,KAAKV,KAAL,CAAWC,SAAvC,CAFR;AAID,KA9BqD;AAAA;;AAAA,C,CAiCxD;AACA;AACA;AACA;AACA;;;AACA,eAAeJ,uBAAuB,CAACE,WAAD,CAAtC","sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection\r\n} from \"streamlit-component-lib\";\r\nimport React, { ReactNode } from \"react\"\r\n\r\ninterface State {\r\n  numClicks: number\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass MyComponent extends StreamlitComponentBase<State> {\r\n  public state = { numClicks: 0 }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const name = this.props.args[\"name\"]\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <span>\r\n        Hello, {name}! &nbsp;\r\n        <button onClick={this.onClicked} disabled={this.props.disabled}>\r\n          Click Me!\r\n        </button>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClicked = (): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    this.setState(\r\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\r\n      () => Streamlit.setComponentValue(this.state.numClicks)\r\n    )\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"]},"metadata":{},"sourceType":"module"}